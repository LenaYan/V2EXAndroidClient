/*
 *  Copyright (C) 2015 Rayman Yan
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */
apply plugin: 'com.android.application'
//apply plugin: 'com.frogermcs.androiddevmetrics'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'realm-android'

//if (file("../BaseLibrary/fir_publish.gradle").exists()) {
//    apply from: "../BaseLibrary/fir_publish.gradle"
//}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId 'com.ray.sample.v2ex'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    buildTypes {
        debug {
            minifyEnabled false
            debuggable true
            applicationIdSuffix '.debug'
        }
        release {
            minifyEnabled false
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    dataBinding {
        enabled = true
    }
    compileOptions {
        sourceCompatibility rootProject.ext.sourceCompatibilityVersion
        targetCompatibility rootProject.ext.targetCompatibilityVersion
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    dexOptions {
        javaMaxHeapSize "2048M"
    }
}

retrolambda {
    javaVersion rootProject.ext.retrolambdaJavaVersion
    defaultMethods true
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':BaseLibrary')

    /*Dagger compile*/
    annotationProcessor depMap.DaggerCompile

    /*For generated code*/
    provided depMap.JavaxAnnotations

    /*Leakcanary*/
    debugCompile depMap.LeakCanary
    releaseCompile depMap.LeakCanaryAndroidNoOp
    testCompile depMap.LeakCanaryAndroidNoOp

    /*JUnitTest dependencies*/
    testCompile depMap.JUnit
    testCompile depMap.Annotations
    testCompile depMap.MockitoCore

    /*AndroidTest dependencies*/
    androidTestCompile depMap.RunnerSupport
    androidTestCompile depMap.RulesSupport
    androidTestCompile depMap.Annotations
    androidTestCompile depMap.JUnit
    androidTestCompile depMap.RecyclerView
    androidTestCompile depMap.Design
    androidTestCompile depMap.AppCompat
    androidTestCompile depMap.FindBugs
    androidTestCompile(depMap.EspressoContrib, {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    })
    androidTestCompile(depMap.EspressoIntents, {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    })
    androidTestCompile(depMap.EspressoIDLing, {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    })
    androidTestCompile(depMap.EspressoCore, {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    })
}